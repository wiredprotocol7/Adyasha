swagger: "2.0"
info:
  description: "A sample music server"
  version: "1.0.0"
  title: "Zooniverse Music"
  termsOfService: "http://adyasha.zooinverse.in/terms/"
  contact:
    email: "adyasha@zooinverse.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "zooinverse.com"
basePath: "/home"
tags:
- name: "music"
  description: "Everything Music"
  externalDocs:
    description: "Find out more"
    url: "http://zooinverse.com"
- name: "video"
  description: "Everything Video"
  externalDocs:
    description: "Find out more"
    url: "http://zooinverse.com"

schemes:
- "https"
- "http"
paths:
  /music/SearchbyContId/{contentId}:
    get:
      tags:
      - "music"
      summary: "Find Music by Content ID"
      description: "search and discover music by content identification or fingerprinting"
      operationId: "getMusictByContentId"
      produces:
      - "app/xml"
      - "app/json"
      parameters:
      - name: "contentId"
        in: "path"
        description: "Content Id of music to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Music not found"
  /music/SearchbyUserId/{userId}:
    get:
      tags:
      - "music"
      summary: "Find Music based on User profile"
      description: "search and discover music by user profile"
      operationId: "getMusicByuserId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Content to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Music not found"
  /music/SearchbySimilarUser/{userId}:
    get:
      tags:
      - "music"
      summary: "Find Music based on users to similar to the User"
      description: "search and discover music based on other users similar to the user"
      operationId: "getMusictBySimilaruserId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Content to return"
        required: true
        type: "array"
        items:
          type: "string"
          default: "Music Found ID"
          enum:
          - "Music"
        collectionFormat: "csv"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Music not found"
  /music/SearchbySimilarContId/{contentId}:
    get:
      tags:
      - "music"
      summary: "Find Music similar to the given music"
      description: "Returns a music that is simliar to a givn music video based on content similarity"
      operationId: "getMusictBySimilarContentId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "contentId"
        in: "path"
        description: "Content Id of music"
        required: true
        type: "array"
        items:
          type: "string"

          default: "Music Found ID"
          enum:
          - "Music"
        collectionFormat: "csv"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Music not found"
  /music/SearchbyMetadata:
    get:
      tags:
      - "music"
      summary: "Find Music by Metadata"
      description: "Returns a music that is searched using Metadata"
      operationId: "getMusictByMetadata"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Music not found"  
  /video/uploadVideo:
    post:
      tags:
      - "video"
      summary: "uploads an video"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
          
  /video/viewThumbnail/{videoID}: 
    get:
      tags:
      - "video"
      summary: "Get thumbnails of video"
      description: "view thumbnail subsequence of video segments"
      operationId: "getVideoByVideoId"
      produces:
      - "app/xml"
      - "app/json"
      parameters:
      - name: "videoID"
        in: "path"
        description: "Content Id of music to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Music not found"  
  
 

    
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "Music"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "Is the music available"
        enum:
        - "available"
        - "to be relased"
        - "Unable to find"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
